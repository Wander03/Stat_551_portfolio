---
title: "Stat 541 Final Portfolio"
format: pdf
editor: visual
self-contained: true
toc: true
---

```{r}
#| include: false
#| label: packages-portfolio-objectives

library(tidyverse)

portfolio_levels <- tibble(
  Objective = character(), 
  Level = numeric() 
  )
```

# Independent Learning (IL):

*These objectives show your ability to seek out new information and adapt to new tools to solve data analysis problems.*

------------------------------------------------------------------------

## \[IL-1\] Adding new skills:

-   I can find and adopt new packages to accomplish tasks.
-   I can adapt to different syntax styles (tidy, base, formula style, data.table).
-   I can use tutorials, etc. to enhance my understanding of new concepts

```{r}
#| include: false
#| label: IL-1

## Fill in the line below with your self-assigned level for this objective.
## Remember, you have the following levels to choose from:

# 1 = novice
# 2 = proficiency
# 3 = mastery 
# 4 = expert

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "IL-1",
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

## \[IL-2\] Online resources:

-   I can use online resources (Google, ChatGPT, StackOverflow) to solve problems, debug, or find new tools.
-   I can find source code for similar projects to use as starting points for my own
-   I can read the documentation of an API to figure out how to access data.

```{r}
#| include: false
#| label: IL-2

## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "IL-2", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

For the Week 3 Shiny Project, I found the base code for our server, ui, and global files on [RStudios gallery](https://shiny.posit.co/r/gallery/start-simple/word-cloud/) of Shiny apps. Furthermore, I relied on ChatGTP to support some of my changes to modifying the base code. For example, I noticed that my word cloud plot cut off words when the size or amount of words exceeded some limit. I queried "my plot gets cutt off when too many words are allowed in my word cloud" after providing my code, and ChatGPT provided three solutions. I recognized that one of them was impossible, and after testing the remaining two found that only one of them solved my issue, but solve it did!

------------------------------------------------------------------------

# Reproducible Workflow (RW):

*These objectives show your ability to produce artifacts and deliverables that are organized, documented, version tracked, and responsibly designed.* \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

## \[RW-1\] File, code, and data management:

-   I can use Git and GitHub to track my progress and collaborate (creating repos, cloning, forking, pull requesting).
-   I always use R Projects and the {here} package to organize my scripts, notebooks, data, and applications.

```{r}
#| include: false
#| label: RW-1

my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "RW-1",
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

Look no further than this portfolios [github page](https://github.com/Wander03/Stat_551_portfolio) itself! Here you can see evidence of creating my own repo, then [forking and pull requesting](https://github.com/Wander03/Stat_551_portfolio/network) in a neat, orderly, manner. A beautiful example of cloning occurred during the [Shiny Project](https://github.com/keasley8/Project_1_Shiny), which is wonderfully organized into a "data" folder and a "app" folder housing our R scripts (named fake_news). Within this folder itself you can find examples of the {here} package being used within the [global notebook](https://github.com/keasley8/Project_1_Shiny/blob/main/fake_news/global.R), aiming at the "data" folder and then the necessary data set file.

------------------------------------------------------------------------

## \[RW-2\] Notebooks:

-   I can use Quarto and/or R Markdown to produce a reproducible notebook and polished rendered document.
-   I can use appropriate chunk options (echo, error, cache, etc.) to render my qmd/Rmd quickly and cleanly.

```{r, include = FALSE}
#| include: false
#| label: RW-2

my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "RW-2",
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

The [practice lab](https://github.com/Cal-Poly-Advanced-R/practice-lab-Wander03/blob/master/practice-lab.qmd) is the all-in-one assignment with a variety of different chunk options decorating the Quarto file. From echo, to error, to message, it has it all! Although it has wonderful labels as well, lets look to lab 1 for examples of this. Specifically, [part 2](https://github.com/Cal-Poly-Advanced-R/lab-1-review-Wander03/blob/master/part2.qmd) does a perfect job with the label chunk option naming each chunk appropriately (it even has warning and message options added as needed). Additionally, we can see the [rendered output for part 2](https://github.com/Cal-Poly-Advanced-R/lab-1-review-Wander03/blob/master/part2.html), and part 1 if you want it, presenting the fruits of our labor (minus the chunk labels, those are hidden away).

------------------------------------------------------------------------

## \[RW-3\] Code style

-   My code is clear, readable, well-organized, and well-commented.
-   I can use a package-based workflow to organize my analyses

```{r}
#| include: false
#| label: RW-3

my_level <- 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "RW-3",
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

My code, especially my functions, include comments (almost) line by line, as well as an overall comment describing the inputs and outputs of the function as a whole. A fresh example (at the time of writing this) is from lab 4 (where did lab 3 go? who knows!). Within this [pull request](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-Ryan-DeStefano/pull/6/files), lines 65 to 155 contain parts of a helper function I wrote. The aforementioned pull request shows my addition of comments so my group mates, and others, can understand the logic of my function. Later on in a [separate pull request](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-Ryan-DeStefano/pull/7/commits/f627bd450f2da77f9de80d84c823b40614d3894e) I added an overall header to said function! Looking the very first chunk in any of my Quarto notebooks, you will see a chunk labeled "set-up" or "packages" indicating a chunk of only R packages being instantiated. Going back to [lab 4](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-Ryan-DeStefano/blob/master/main.qmd), the amount of packages is quiet substantial, and includes the chunk option "message: false" to hide any output from said chunk.

------------------------------------------------------------------------

# Technical Communication (TC):

*These objectives show your ability to communicate the processes you have implemented in your code, as well as the data conclusions and results.*

------------------------------------------------------------------------

## \[TC-1\] Project summaries:

-   I can clearly and succinctly summarize the contributions of my project.
-   I accurately interpret statistical or modeling results.
-   I consider the appropriate scope and impact of my project results.

```{r}
#| include: false
#| label: TC-1

my_level <- 2

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "TC-1", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

The only example I can think of for this (so far) is the [overview document](https://github.com/keasley8/Project_1_Shiny/blob/main/STAT541%20Project%20Workspace.docx) submitted with the Shiny Project. In this document, we summarize our data, data cleaning process, our files, and finally our app itself. Within the summary of the app, I summarized my contributions (which in turn were my contributions to this project)!

------------------------------------------------------------------------

## \[TC-2\] Documentation:

-   I provide ample documentation and tutorials for my custom functions.
-   I provide user-friendly guides for my tools and software

```{r}
#| include: false
#| label: TC-2

my_level <- 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "TC-2", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

For Lab 1, I was the sole contributor to Part 1, the [Q-Q Plot custom function](https://github.com/Cal-Poly-Advanced-R/lab-1-review-Wander03/pull/3#issue-2228813761). This involved creating a custom Q-Q Plotting function and testing it with the cars dataset. My function not only includes comments detailing what each of the following line(s) of code do, but additionally has an [overview comment](https://github.com/Cal-Poly-Advanced-R/lab-1-review-Wander03/pull/5). The overview comment lists what data types each input is required to be along with what the output of the function is. For another example, see my [get_passes function from lab 4](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-Ryan-DeStefano/blob/master/main.qmd) (as mentioned in RW-3).

------------------------------------------------------------------------

# Data Manipulation (DM):

*These objectives relate to the collection, cleaning, processing, and preparing of datasets for analysis.*

------------------------------------------------------------------------

## \[DM-1\] Data preparation:

-   I can read in datasets to R, including untidy ones.
-   I can clean datasets to deal with missing data, typos, poor formatting, etc.

```{r, include = FALSE}
#| include: false
#| label: DM-1

my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "DM-1", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

In lab 2 I [read in a data set](https://github.com/Cal-Poly-Advanced-R/lab-2-visualization-kchan78/pull/11/commits/fb212a6e3a313e9c9f06aad6217345f425d8a140) containing country name and number so we could label our observations in our improved graphics. This data was an excel file with multiple sheets, so I had to pick the sheet and range of cells to read in, and label the column name since there were no column headers. Since all the countries and their respective number were all in one string (i.e. "1=US, 2=EU,..."), I needed to clean the column by splitting it into one observation per country (split on ,), then split the number and country into there own columns (split on =). Finally I filtered out a messy observation that appeared from this process and selected the two columns I needed.

------------------------------------------------------------------------

## \[DM-2\] Data wrangling

-   I can cleverly use pivoting, grouping, and joining to wrangle data.
-   I can use mapping ({purrr}), applying (tapply, lapply, ...), and/or iteration (for loops) to perform repeated tasks.

```{r, include = FALSE}
#| include: false
#| label: DM-2

my_level <- 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "DM-2",
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

Once again we return to [lab 4](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-Ryan-DeStefano/blob/master/main.qmd)! The first chunk (lines 23 to 56), after package load in, contains the code for reading, wrangling, and joining the two data sets used. We used select, mutate, and rename to wrangle the data (neither of which were in a csv!), then an inner join to combine the two data sets (this could have also been done in a left or right join, however an inner join keeps only observations that appear in both data sets). The next chunk (lines 179 to 198) has an example of the map function in action as well as a pivot wider! Fun aside, for mastery so I guess not so much an aside, in [this commit](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-Ryan-DeStefano/pull/6/commits/d64f13342d2ebd13e9ec87ded1a7c244513a9d46) you can see how I replaced the superseded pmap_dfr function, which I originally used, with the map function.

------------------------------------------------------------------------

## \[DM-3\] Data formats

-   I can use API urls to access JSON data and convert it to a data frame

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(tibble(Objective = "DM-3", 
                   Level = my_level))
```

### Level: `r my_level`

### Justification:

So far we have only handled API uses twice, once in a check in and once in lab 4. The final question for "Check-Ins: New Data Sources" required us to connect and use the same API as lab 4. While I do not have the code I used anymore, since it was in the console, I have the proof of my correct response to show that I correctly called the API and converted the JSON object. For [lab 4](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-Ryan-DeStefano/blob/master/main.qmd), my group did this section collaboratively as a group (lines 92 to 133). This code ended up being a part of the function I wrote, crafting an API call for each state, checking the success of the API call, then transforming the JSON to a data frame.

------------------------------------------------------------------------

## \[DM-4\] Data collection

-   I can webscrape simple tables and information

```{r}
#| include: false
#| label: DM-4

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "DM-3", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

# Professional Visualization (PV):

------------------------------------------------------------------------

## \[PV-1\] ggplot: grammar of graphics

-   I can use less common geometries, including those from ggplot extension packages.
-   I can use the correct aesthetics to map variables
-   I understand how geometries inherit aesthetics
-   I can add annotations to my plot

```{r}
#| include: false
#| label: PV-1

my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "PV-1", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

The perfect example of this learning objective can be found in lab 2! My contributions were on [visualization 2](https://github.com/Cal-Poly-Advanced-R/lab-2-visualization-kchan78/pull/12/commits/d43d83c056aa80774ebe7184c7967f9eadcd7f37), where I used {ggplot} and {ggrafe} to improve a scatter plot. In my graph code (lines 150 to 192) we can see how I defined the aesthetics for my graph in the ggplot() function at the beginning, then took advantage of this in geom_smooth().

------------------------------------------------------------------------

## \[PV-2\] ggplot: theme

-   I can edit the titles, subtitles, captions, axis labels, etc. to create a clearly labelled plot
-   I can choose colors ("scales") and themes to make a visually pleasing and accessible plot

```{r}
#| include: false
#| label: PV-2

my_level <- 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "PV-2", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

Let us return to lab 2 from the previous learning objective. In [visualization 2](https://github.com/Cal-Poly-Advanced-R/lab-2-visualization-kchan78/pull/12/commits/d43d83c056aa80774ebe7184c7967f9eadcd7f37), we can see the wonderful title and subtitle I gave my plot, with the removal of the axis labels. In the theme() function I modified the text type and size of these aspects, while in the scale_x/y_continuous() functions I added percentage signs (because my axis variables are percents!). I have a few additional changes in my theme() function editing the major and minor grid lines to make the graph more pleasing to view while keeping the usefulness of a line to compare points to.

------------------------------------------------------------------------

## \[PV-3\] Dynamic visualizations

-   I can use a package like {gganimate} to create self-contained gifs
-   I can use a package like {plotly}, {ggplotly}, {leaflet}, {ggirafe}, etc. to make interactive html widgets

```{r}
#| include: false
#| label: PV-3

my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "PV-3", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

\[ADD JUSTIFICATION FOR GGANIMATE WHEN YOU USE IT (I KNOW YOU WILL USE IT FUTURE ME\]

For Lab 2, although I created the 2nd Visualization, I was the first to [create my graph](https://github.com/Cal-Poly-Advanced-R/lab-2-visualization-kchan78/pull/12/commits/d43d83c056aa80774ebe7184c7967f9eadcd7f37). For my team I pioneered the use of {ggirafe}, picking out how to create pop-up labels when hovering over data points and format them nicely. Looking at Katherines contributes later, you can see the same general formatting for [her use](https://github.com/Cal-Poly-Advanced-R/lab-2-visualization-kchan78/pull/18/commits/cd8b30c4b1b6a1803994a51dd4bd50f07a5d5c6d) of {ggirafe}. Additionally, I [improved upon the leaflet](https://github.com/Cal-Poly-Advanced-R/lab-2-visualization-kchan78/pull/23/commits/92e2348539c67414c64048518dffebfdfd1fb5bb) Kai created, adding labels on hover and setting the initial View.

------------------------------------------------------------------------

## \[PV-4\] Shiny

-   I can create a functional Shiny app.
-   I understand the principle of reactivity, and how to use it.

```{r}
#| include: false
#| label: PV-4

my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "PV-4", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

Well this is just asking to link all of the Shiny Project, so I will! I layed the foundations for my groups shiny app as seen in the following [pull request](https://github.com/keasley8/Project_1_Shiny/pull/4). Although much of this code was from the the RStudios gallery (as noted in IL-2), I made substantial edits scattered throughout my [following pull requests](https://github.com/keasley8/Project_1_Shiny/pulls?q=is%3Apr+is%3Aclosed) to the ui, server, and global files. Regarding [reactivity](https://github.com/keasley8/Project_1_Shiny/blob/main/fake_news/server.R), my word cloud plot waits for the user to select a category to filter on then press a button before updating. This functionality was expanded to the two additional plots my group mates created. We ran into an error with there plots where the titles would update prior to the "change" button being pressed. To solve this issue, we used eventReactive to store the title so it would wait until the button was pressed.

------------------------------------------------------------------------

# Software Development (SD):

*These objectives relate to your ability to develop correct, usable, well-designed, and sophisticated software in the R language.*

------------------------------------------------------------------------

## \[SD-1\] R programming language details

-   I understand non-standard evaluation (aka "Tidy Eval" or "unquoted objects"), and I can use tunneling in my functions.
-   I understand functional programming, and I can use functions as objects in my code design
-   I understand object-oriented programming, and I can define my own classes and methods.

```{r}
#| include: false
#| label: SD-1

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "SD-1", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

## \[SD-2\] Package creation:

-   I can create a folder that is installable as an R package, possibly using {usethis} helper functions
-   I can document my functions using {roxygen2} style commenting
-   I can write and run unit tests using {testthat}
-   I can design a package that is user-friendly and has well-designed functions.

```{r}
#| include: false
#| label: SD-2

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "SD-2", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

# Matrix Operations (MO):

*These objectives show your ability to manipulate data-related information in the form of vectors and matrices, rather than in high-level data structures.*

------------------------------------------------------------------------

## \[MO-1\] Theory:

-   I understand the difference between ordinary multiplication and matrix multiplication, and how to implement each in R
-   I can implement and briefly explain the matrix equations for multiple linear regression

```{r}
#| include: false
#| label: MO-1

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "MO-1", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

## \[MO-2\] Object structures:

-   I can convert data objects into the necessary matrix structures to perform operations on them.
-   I can convert results of matrix operations to convenient data analysis formats

```{r}
#| include: false
#| label: MO-2

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "MO-2", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

# Algorithms and Iteration (AI):

*These objectives ask you to design code-based approaches to statistical computing problems, usually involving iteration to a stopping condition.*

------------------------------------------------------------------------

## \[AI-1\] Creating an algorithm:

-   I can invent and implement my own iterative algorithm.

```{r}
#| include: false
#| label: AI-1

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "AI-1", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

## \[AI-2\] Generative art:

-   I can apply a variety of generative art functions to make a visually pleasing piece.
-   I can explain why particular changes to the code result in particular differences in the visualization.

```{r}
#| include: false
#| label: AI-2

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "AI-2", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

# Code Design (CD):

*These objectives relate to making wise or clever choices in how you implement a procedure in code; including creating functions and objects, or thinking about the clarity and efficiency of processes.*

------------------------------------------------------------------------

## \[CD-1\] Speed and Efficiency:

-   I can recognize moments of possible slowdown in my code, and use built-in functions or parallelizing to speed them up.
-   I always use and design vectorized functions whenever possible.

```{r}
#| include: false
#| label: CD-1

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "CD-1", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

## \[CD-2\] Object handling:

-   I can make reasonable choices in my code design about when to save intermediate objects.
-   I can convert objects between types and structures as needed.

```{r}
#| include: false
#| label: CD-2

my_level <- 1

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "CD-2", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

------------------------------------------------------------------------

## \[CD-3\] Supporting functions:

-   I write helper/shortcut functions to streamline repeated tasks and make my code easier to read.
-   I use intermediate functions to streamline repeated or looping processes.

```{r}
#| include: false
#| label: CD-3

my_level <- 2

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "CD-3", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

I am writing this after I write the below learning objective, so back to lab 4! [My function](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-Ryan-DeStefano/pull/6/files) I wrote here is actually a helper function for looping through each country. By creating this helper function, my code is much cleaner than it would be otherwise.

------------------------------------------------------------------------

## \[CD-4\] Algorithmic process:

-   My loops are clean and efficient
-   Proper values are calculated to update objects and/or determine stopping conditions
-   I have built in checks for possible problems or extreme cases in the algorithm

```{r}
#| include: false
#| label: CD-4

my_level <- 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(
    tibble(Objective = "CD-4", 
           Level = my_level)
    )
```

### Level: `r my_level`

### Justification:

[My function](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-Ryan-DeStefano/pull/6/files) to call the API in lab 4 (lines 61 to 134) ticks all of the boxes for this learning objective. It beings with stopping conditions for each parameter to ensure the correct data type is being inputted (added in a [later pull request](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-Ryan-DeStefano/pull/7/files)). Then, depending on the output from the API all the function might increase the hours value and recall the API (increasing retry_count by 1), retry the API if an error occurred (also increasing retry_count by 1), or having collected the correct information return the output. This occurs in a while loop, and can continue until retry_count equals the input parameter max_retries, the hours parameter equals 72, or the correct information is obtained and returned. Additionally, since 72 hours is the max hours the API can handle, I have a case_when() function checking to make sure the hours does not add over 72, and that once 72 hours is checked the function terminates with a message describing why.

------------------------------------------------------------------------

# Summary

```{r}
#| echo: false
#| label: summary-graph

portfolio_levels %>%
  mutate(
    Category = str_extract(Objective, "[A-Z]{2}"),
    Level = factor(Level)
  ) %>%
  ggplot(
    aes(x = Level, 
        y = (..count..)/sum(..count..)
        )
    ) +
  geom_bar() +
  labs(x = "Level",
       y = "Percent") +
  theme_bw() +
  scale_y_continuous(labels = scales::percent)
```

## Grade

Based on the summary plot above, I believe I have earned a \_\_\_ in STAT 541.

### Justification
